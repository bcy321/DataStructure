package ch01;
/*
* 프로그램에서 사용할 많은 데이타를 메모리 상에서 관리하는 여러 구현 방법들
*
* 배열 : 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 자료의 물리적 위치와 논리적 위치가 같음
* 연결리스트 : 선형으로 자료를 관리, 자료가 추가 될 때 마다 메모리를 할당 받고 자료는 링크로 연결됨, 자료의 물리적, 논리적 위치가 다를 수 있음.
* 스택 : 가장 나중에 입력된 자료가 가장 먼저 출려되는 자료구조(Last in First out)
* 큐 : 가장 먼저 입력 된 자료가 먼저 출력되는 자료 구조(First in First out)
* 트리 : 부모 노드와 자식 노드간의 연결로 이루어진 자료 구조
*
* 힙 : Priority queue를 구현
*    Max heap : 부모 노드는 자식노드보다 항상 크거나 같은 값을 갖는 경우
*    Min heap : 부모 노드는 자식노드보다 항상 작거나 같은 값을 갖는 경우
*    heap 정렬에 활용 할 수 있음
*
* 그래프 : 정점과 간선들의 유한 집합
*   정점 : 여러 특성을 가치는 객체, 노드
*   간선 : 이 객체들을 연결 관계를 나타냄 , 링크
*   간선은 방향성이 있는 경우와 없는 경우가 있음
*   그래프를 구현하는 방법 : 인접 행렬 , 인접 리스트
*   그래프를 탐색하는 방법 : BFS. DFS
*
* 해싱 : 자료를 검색하기 위한 자료 구조
*   검색을 위한 자료구조
*   키에 대한 자료를 검색하기 위한 사전 개념의 자료구조
*   키는 유일하고 이에 대한 value를 쌍으로 저장
*   index=key: 해시 함수가 key에 대한 인덱스를 반환해줌 해당 인덱스의 위치에 자료를 저장하거나 검색하게 됨
*   해시 함수에 의해 인덱스 연산이 산술적으로 가능
*   저장되는 메모리 구조를 해시테이블이라 함함
**
* */
public class SummaryDataStructure {
}
